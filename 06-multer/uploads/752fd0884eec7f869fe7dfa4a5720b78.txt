-- Sélectionner toutes les données
-- de la table acteur
SELECT * FROM actor;

-- Sélection juste le prénom et le nom
-- d'un acteur
SELECT first_name, last_name FROM actor;

-- Il faut absolument un espace après les doubles tirets pour que la ligne soit comprise comme un commentaire

-- Pour utiliser un nom réservé comme nom de colonne dans une query. On peut l'échapper en l'entourant de back tick
SELECT `group` from example;

-- La convention de nomage en sql est le snake_case

-- On peut limiter le nombre de résultats de nos requêtes avec LIMIT [nombrer]
SELECT first_name , last_name FROM actor LIMIT 42;


-- Avec OFFSET, on lui demande de passer les 40 premiers résultats (pour avoir les actors 41 à 80)
SELECT actor_id, first_name , last_name FROM actor LIMIT 40 OFFSET 40;

-- ORDER BY permet de trier les résultats selon une colonne
SELECT * from actor ORDER BY last_name DESC;
-- On peut rajouter ASC (pour ascendant) et DESC (pour descendant) à la fin pour préciser l'ordre dans lequel ça doit être trié

-- Sélectionner les 5 films les plus longs
SELECT * FROM film ORDER BY `length` DESC LIMIT 15;

-- Trier les films par ordre alphabétique
SELECT * FROM film ORDER BY title;

-- On peut ordonner selon plusieurs colonnes
SELECT * FROM film ORDER BY `length`, title;

-- Sélectionne tous les acteurs où le prénom est égale à PENELOPE
SELECT * from actor WHERE first_name='PENELOPE';

-- Tous les acteurs dont l'id est strictement supérieur à 45
SELECT * from actor WHERE actor_id > 45;

-- Tous les paiements dont le montant est plus grand ou égale à 10.99
SELECT * from payment where amount >= 10.99;

-- Selectionner tous les clients actifs

SELECT * FROM customer WHERE active = TRUE;

SELECT * FROM customer WHERE active = 1;

-- Selectionner tous les films sauf "ACADEMY DINOSAUR"

SELECT * FROM film WHERE title != "ACADEMY DINOSAUR";

SELECT * FROM film WHERE NOT title = "ACADEMY DINOSAUR";

-- Selectionner tous les films dont la longueur est inférieur ou égale à 126 minutes

SELECT * FROM film WHERE `length` <= 126;

-- On a rassemblé 2 colonnes ensemble avec la fonction CONCAT
-- On a utlisé AS pour donner un nom au résultat de notre fonction concat
SELECT actor_id,CONCAT(first_name, " ", last_name) AS full_name from actor;

-- On transforme le rental rate. D'abord en l'arrondissant en ajoutant 0.01 Puis en multipliant par 2
SELECT (rental_rate + 0.01) * 2 AS note_sur_10 from film;

-- Afficher la longueur des films en HEURE puis les trié par longueur décroissante

SELECT title,`length`/60 AS duration_per_hour FROM film ORDER BY `length` DESC;

-- LIKE 
-- Tout les acteurs dont le prénom commence par J 
SELECT * from actor WHERE first_name LIKE 'J%';

-- Tout les acteurs dont le prénom commence JUD et qui ont 4 lettres précisément 
SELECT * from actor WHERE first_name LIKE 'JUD_';

-- Tous les acteur dont le prénom termine par A
SELECT * from actor WHERE first_name LIKE '%A';

-- Sélectionner les 5 premiers textes de films ayant une description contenant le mot "Woman".
SELECT * FROM film_text WHERE description LIKE '%Woman%' LIMIT 5;

-- IN 
-- Sélectionne tous les actors dont le prénom est BEN OU ALBERT
SELECT * FROM actor WHERE first_name IN ("BEN", "ALBERT");

-- Sélectionner films ayant un rating PG,NC-17 et R

SELECT * FROM film WHERE rating IN ("PG", "NC-17", "R");

-- BETWEEN AND
SELECT * FROM customer WHERE create_date BETWEEN '2006-03-01' AND '2006-03-31';

-- Avec un between, sélectionner les locations entre le 20 mai 2005 et le 25 mai 2005 inclus et les trier du plus récent au plus ancien
SELECT * FROM rental WHERE rental_date BETWEEN '2005-05-20' AND '2005-05-26' ORDER BY rental_date DESC;

-- Le format de la date est toujours 'Année-Mois-Jour'

-- NOT 

SELECT * FROM customer WHERE NOT first_name = 'MARY';

SELECT * FROM film WHERE NOT rating IN ("PG", "NC-17", "R");

-- Sélectionner les clients qui ne se sont pas inscrits entre le 13 et la 14 février 2006.

SELECT * FROM customer WHERE create_date NOT BETWEEN '2006-02-12' AND '2006-02-15';

-- AND 

SELECT * FROM actor WHERE first_name="Bruno" AND last_name="BASINGER";

SELECT * FROM customer WHERE active AND store_id = 1 LIMIT 10;

-- OR

SELECT * FROM actor WHERE first_name = "BRUNO" OR last_name = "GUINESS";

SELECT * from customer where first_name="LAURA" OR last_name="SMITH";

-- Grouper les conditions
SELECT * from film WHERE (film_id > 10 OR `length` < 180) AND (rating = 'PG');

-- Selectionner un film qui contient DINOSAUR dans son titre ou Dont l'id est supérieur à 42 ET qui contient Battle dans sa decription

SELECT * FROM film WHERE (title LIKE "%DINOSAUR%" OR film_id > 42 ) AND description LIKE "%Battle%";

SELECT * FROM film WHERE  original_language_id IS NULL;

SELECT * FROM staff WHERE picture IS NULL;
 
-- UNION supprime les doublons
-- Je dois utiliser UNION ALL si je veux garder les doublons
SELECT first_name, last_name from actor
UNION ALL
SELECT title, description from film;


SELECT CONCAT(first_name, ' ', last_name) FROM customer WHERE first_name LIKE '%PAUL%' OR first_name LIKE '%DINO%' OR
last_name LIKE '%PAUL%' OR 
last_name LIKE '%DINO%'
UNION ALL
SELECT title FROM film
WHERE title LIKE '%PAUL%' OR title LIKE '%DINO%'
UNION ALL
SELECT CONCAT(first_name, ' ', last_name) FROM actor 
WHERE first_name LIKE '%PAUL%' OR 
first_name LIKE '%DINO%' OR 
last_name LIKE '%PAUL%' OR 
last_name LIKE '%DINO%';

-- regrouper un enregistrement de location avec un enregistrement de client. lien grâce à la colonne customer_id présent dans mes 2 tables
SELECT customer.first_name, customer.last_name, rental.rental_date FROM rental
JOIN customer ON rental.customer_id = customer.customer_id;

SELECT film.title, actor.first_name, actor.last_name FROM film_actor JOIN 
actor ON film_actor.actor_id = actor.actor_id JOIN film ON film_actor.film_id = film.film_id;

-- LEFT JOIN

SELECT * from category
LEFT JOIN film_category
ON film_category.category_id = category.category_id 
LEFT JOIN film
on film.film_id  = film_category.film_id;

-- Selectioner toutes les langues ainsi que les films associés à cet langue même si aucun film n'est dans cet langue
SELECT language.name AS language, film.title AS film
FROM language
LEFT JOIN film ON language.language_id = film.language_id;

-- RIGHT JOIN 

SELECT * FROM film
RIGHT JOIN language 
ON language.language_id = film.language_id;


SELECT * FROM rental
RIGHT JOIN customer 
ON rental.customer_id = customer.customer_id;

-- Sélectionner les locations effectuées par les clients, leurs noms, même si aucun enregistrement n'est dans la table des locations.
SELECT customer.first_name, customer.last_name, rental.rental_id
FROM rental
RIGHT JOIN customer ON customer.customer_id = rental.customer_id;

-- CROSS JOIN 

SELECT film.title, language.name FROM
film CROSS JOIN language;

-- Les fonctions d'agrégation sont utilisées pour effectuer des calculs sur un ensemble de valeurs et retourner un seul résultat.
-- MAX() Retourne la valeur maximale d'une colonne.

SELECT SUM(film_id) FROM film;
SELECT MAX(`length`), title FROM film;

-- COUNT() Compte le nombre de lignes dans un ensemble de résultats.

SELECT SUM(film_id) FROM film;
SELECT MAX(`length`), title FROM film;
SELECT COUNT(*) FROM film;
SELECT COUNT(*) FROM film WHERE `length`=185;
SELECT COUNT(picture) FROM staff;
SELECT COUNT(rental_duration) FROM film WHERE rental_duration > 5;

-- SUM() Calcule la somme des valeurs d'une colonne.
SELECT SUM(`length`)/60 FROM film;
SELECT SUM(amount) AS total_payment FROM payment
JOIN customer ON payment.customer_id = customer.customer_id WHERE first_name LIKE "%MARGARET%";

-- AVG() Calcule la moyenne des valeurs d'une colonne.
SELECT AVG(amount) FROM payment;
SELECT AVG(`length`) AS Average_duration_minute FROM film;
SELECT AVG(`length`)/60 AS average_duration_hour FROM film;

-- MIN() Retourne la valeur minimale d'une colonne.
SELECT MIN(rental_duration) FROM film;

SELECT MIN(payment.amount), CONCAT(first_name, ' ', last_name) AS minimal_payment
FROM customer
JOIN payment ON customer.customer_id = payment.customer_id WHERE customer.customer_id =1;

-- GROUP BY Utilisé avec les fonctions d'agrégation pour regrouper les résultats en fonction des valeurs d'une ou plusieurs colonnes.
SELECT COUNT(*), `length` FROM film 
GROUP BY `length`;
SELECT amount, COUNT(*) FROM payment
GROUP BY amount;

-- HAVING La clause HAVING est utile pour filtrer les résultats en fonction des valeurs agrégées après l'application de la clause GROUP BY.
SELECT amount, COUNT(*) AS total_payment FROM payment 
GROUP BY amount HAVING total_payment > 100;

-- inférieur à 200eur
SELECT CONCAT(customer.first_name, ' ', customer.last_name) AS fullname, COUNT(payment.amount) AS total_payment
FROM customer 
JOIN payment ON payment.customer_id = customer.customer_id
GROUP BY customer.customer_id
HAVING total_payment < 200;

-- supèrieur à 200eur
SELECT CONCAT(customer.first_name, ' ', customer.last_name) AS fullname, 
SUM(payment.amount) AS total_payment
FROM customer 
JOIN payment ON payment.customer_id = customer.customer_id
GROUP BY customer.customer_id
HAVING total_payment > 200;

SELECT CONCAT(customer.first_name, ' ', customer.last_name) AS fullname, 
SUM(payment.amount) AS total_payment
FROM customer 
JOIN payment ON payment.customer_id = customer.customer_id
WHERE payment.rental_id IS NOT NULL
GROUP BY customer.customer_id
HAVING total_payment > 200;

-- Agrégation reservé aux dates
SELECT DATE_FORMAT(payment_date, '%Y-%m') AS formatted, COUNT(*)  FROM payment GROUP BY formatted;

SELECT `length`, rental_rate, COUNT(*) FROM film GROUP BY `length`, rental_rate;

SELECT DATE_FORMAT(payment_date, '%Y-%m') AS formatted, customer.first_name,
COUNT(*) AS total_payments, CONCAT(SUM(payment.amount), '€') AS total_amount_euro FROM payment
JOIN customer ON customer.customer_id = payment.customer_id
GROUP BY formatted, customer.customer_id, customer.first_name;

SELECT YEAR(CURRENT_TIMESTAMP()) AS année, 
	   MONTH(CURRENT_TIMESTAMP()) AS mois, 
	   DAY(CURRENT_TIMESTAMP()) AS jour;

-- les subquery, sont des requêtes SQL imbriquées à l'intérieur d'une requête principale. Elles peuvent être utilisées dans différentes parties d'une requête, comme la clause SELECT, FROM, WHERE, ou HAVING.

SELECT * FROM film WHERE `length`=(SELECT MAX(`length`) FROM film);

-- si on l'utilise pour un opérateur d'égalité (=, <, >, etc) il faut absolument que la requête ne renvoie qu'un seul résultat. Ex ci dessous: la subquery va renvoyé plus d'une ligne et renvoyé une erreur = Query 1: Subquery returns more than 1 row

SELECT * FROM film WHERE `length`=(SELECT `length` FROM film);

-- si l'opérateur de comparaison s'attend à comparer avec plusieurs valeurs (Ex: IN, ON, etc), la subquery peut renvoyé plusieurs valeurs

SELECT * FROM film WHERE film_id 
IN (SELECT film_id FROM film WHERE `length` IN (185, 184, 183, 182, 181, 180));

SELECT customer.first_name, customer.last_name, payment.total_amount FROM customer
JOIN (SELECT customer_id, SUM(amount) AS total_amount FROM payment
GROUP BY customer_id HAVING total_amount > (SELECT AVG(amount) FROM payment)) 
payment ON customer.customer_id = payment.customer_id;

SELECT CONCAT(first_name, ' ', last_name) AS full_name, CONCAT(SUM(payment.amount),'€') AS total FROM customer JOIN payment ON customer.customer_id = payment.customer_id
GROUP BY payment.customer_id HAVING total > (SELECT AVG(amount) FROM payment);

-- Une sous-requête de table, aussi appelée sous-requête dans la clause FROM, est une requête SQL imbriquée à l'intérieur de la clause FROM d'une autre requête. Elle est utilisée pour récupérer des données qui seront traitées comme une table temporaire pour la requête principale.

SELECT active.first_name, active.last_name FROM (SELECT * FROM customer WHERE active = 1) AS active;
SELECT CONCAT(first_name, ' ', last_name) as fullname, (SELECT CONCAT(SUM(amount), '$') FROM payment WHERE payment.customer_id = customer.customer_id) AS total_payment FROM customer;

SELECT film_id, title FROM film
WHERE film_id IN (SELECT film.film_id FROM film
JOIN inventory ON film.film_id = inventory.film_id
JOIN rental ON inventory.inventory_id = rental.inventory_id
GROUP BY film.film_id HAVING COUNT(rental.rental_id) > 10);

SELECT film.film_id, film.title, COUNT(rental.rental_id) AS total_rental FROM film
JOIN inventory ON film.film_id = inventory.film_id
JOIN rental ON inventory.inventory_id = rental.inventory_id
GROUP BY film.film_id, film.title
HAVING COUNT(rental.rental_id) > 10;

-- Créer

INSERT INTO category (name, last_update) VALUES('new_category', CURRENT_TIMESTAMP());
INSERT INTO category (name, last_update) VALUES('new_category1', CURRENT_TIMESTAMP()), ('new_category2', CURRENT_TIMESTAMP());

INSERT INTO staff (staff_id, first_name, last_name, address_id, picture, email, store_id, active, username, password, last_update) VALUES(3, 'Amand', 'Dambrain', 5, NULL, 'DambrainA@gmail.com', 1, 1, 'Maya', NULL, CURRENT_TIMESTAMP());

-- Update

UPDATE category SET name = 'porno' WHERE category_id = 18;
UPDATE film SET original_language_id = (SELECT language_id FROM language WHERE name = 'Japanese')
WHERE title LIKE '%DINOSAUR%';

-- Delete

DELETE FROM category WHERE category_id = 247;

-- créer une base de données

CREATE DATABASE give_me_money;

CREATE TABLE Euro (id INTEGER PRIMARY KEY AUTO_INCREMENT, nom VARCHAR(50), prenom VARCHAR(50), donation DECIMAL(10, 2));

INSERT INTO Euro (nom, prenom, donation, euro_type_id) VALUES('Dambrain', 'Amand', 10, 1);

-- Truncate, supprime et recrée une table (la table est bien entendu recréée vide)

TRUNCATE Euro;

-- supprime une table

DROP TABLE Euro_type;

-- Foreign Key

CREATE TABLE Euro (id INTEGER PRIMARY KEY AUTO_INCREMENT, nom VARCHAR(50), prenom VARCHAR(50), donation DECIMAL(10, 2), euro_type_id INTEGER, FOREIGN KEY (euro_type_id) REFERENCES Euro_type(id));

INSERT INTO Euro (nom, prenom, donation, euro_type_id) VALUES('Dambrain', 'Amand', 10, 1);
INSERT INTO Euro_type (nom, prenom, email, adress) VALUES ('Dambrain', 'Amand', 'email@example.com', 'rue du truc');

-- ajouter une colonne

ALTER TABLE Euro ADD COLUMN rating INTEGER NULL;

-- supprimer une colonne

ALTER TABLE Euro DROP COLUMN rating;

-- supprimer une liaison

ALTER TABLE Euro DROP COLUMN euro_type_id
ALTER tABLE Euro DROP CONSTRAINT `Euro_type_id`;

-- Créer une vue

CREATE VIEW vue_exemple AS
SELECT colonne1, colonne2 or CONCAT(colonne1, ' ', colonne2)
FROM ma_table
WHERE condition;

-- Utilisé une vue comme une table

SELECT * FROM customer_list;

-- Mise à jour de vue Vous pouvez également mettre à jour une vue en utilisant la commande CREATE OR REPLACE VIEW. Cela est utile si vous souhaitez modifier la logique d'une vue existante.


-- Supprimer une vue

DROP VIEW vue_exemple;
